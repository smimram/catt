coh comp
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    :
    (x -> z)
let comp f g = comp _ _ f _ g

coh assoc
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (w : *) (h : z -> w)
    :
    comp (comp f g) h -> comp f (comp g h)
let assoc f g h = assoc _ _ f _ g _ h

coh id (x : *) : (x -> x)
set unsafe-evars = true
let id = id _
set unsafe-evars = false

coh unitl
    (x : *)
    (y : *) (f : x -> y)
    :
    comp id f -> f
let unitl f = unitl _ _ f
let unit1l = unitl

coh unitr
    (x : *)
    (y : *) (f : x -> y)
    :
    comp f id -> f
let unitr f = unitr _ _ f
let unit1r = unitr

coh unitr'
    (x : *)
    (y : *) (f : x -> y)
    :
    f -> comp f id
let unitr' f = unitr' _ _ f
let unit1r' f = unitr'

let id1 = id
let comp1 = comp

coh id2
    (x : *)
    (y : *) (f : x -> y)
    :
    (f -> f)
let id2 f = id2 _ _ f

coh vcomp
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (h : x -> y) (b : g -> h)
    :
    f -> h
let vcomp a b = vcomp _ _ _ _ a _ b
let comp2 = vcomp

coh comp12
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (g' : y -> z) (a : g -> g')
    :
    comp f g -> comp f g'
let comp12 f a = comp12 _ _ f _ _ _ a

coh comp21
    (x : *)
    (y : *) (f : x -> y)
    (f' : x -> y) (a : f -> f')
    (z : *) (g : y -> z)
    :
    comp f g -> comp f' g
let comp21 a g = comp21 _ _ _ _ a _ g

coh unit12l
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    comp2 (unit1r' f) (comp2 (comp12 id a) (unit1r g)) -> a

# coh hcomp
    # (x : *)
    # (y : *) (f : x -> y)
    # (f' : x -> y) (a : f -> f')
    # (z : *) (g : y -> z)
    # (g' : y -> z) (b : g -> g')
    # :
    # comp f g -> comp f' g'
# let hcomp (a : _ -> _) (b : _ -> _) = hcomp _ _ _ _ a _ _ _ b
let hcomp a b = comp2 (comp21 a _) (comp12 _ b)

# coh ichg
    # (x : *)
    # (y : *) (f : x -> y)
    # (g : x -> y) (a : f -> g)
    # (h : x -> y) (b : g -> h)
    # (z : *) (l : y -> z)
    # (m : y -> z) (c : l -> m)
    # (n : y -> z) (d : m -> n)
    # :
    # hcomp (vcomp a b) (vcomp c d) -> vcomp (hcomp a c) (hcomp b d)
# let ichg (a : _ -> _) (b : _ -> _) (c : _ -> _) (d : _ -> _) = ichg _ _ _ _ a _ b _ _ _ c _ d

coh ichg2
    (x : *)
    (y : *) (f : x -> y)
    (f' : x -> y) (a : f -> f')
    (z : *) (g : y -> z)
    (g' : y -> z) (b : g -> g')
    :
    comp2 (comp21 a g) (comp12 f' b) -> comp2 (comp12 f b) (comp21 a g')

let eckmann-hilton (a : id -> id) (b : id -> id) =
    comp2 (comp21 a id) (comp12 id b)




# hyp x : *
# hyp y : *
# hyp z : *
# hyp f : x -> y
# hyp g : y -> z
# eval (comp f g)


# set groupoid = true

# coh inv (x : *) (y : *) (f : x -> y) : y -> x