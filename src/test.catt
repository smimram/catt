coh comp1
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    :
    (x -> z)
let comp1 f g = comp1 _ _ f _ g

coh assoc1
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (w : *) (h : z -> w)
    :
    comp1 (comp1 f g) h -> comp1 f (comp1 g h)
let assoc1 f g h = assoc1 _ _ f _ g _ h

coh id1 (x : *) : (x -> x)

coh unit1l
    (x : *)
    (y : *) (f : x -> y)
    :
    comp1 (id1 x) f -> f
let unit1l f = unit1l _ _ f

coh unit1l'
    (x : *)
    (y : *) (f : x -> y)
    :
    f -> comp1 (id1 x) f
let unit1l' f = unit1l' _ _ f

coh unit1r
    (x : *)
    (y : *) (f : x -> y)
    :
    comp1 f (id1 y) -> f
let unit1r f = unit1r _ _ f

coh unit1r'
    (x : *)
    (y : *) (f : x -> y)
    :
    f -> comp1 f (id1 y)
let unit1r' f = unit1r' _ _ f

coh unit1lr
    (x : *)
    :
    unit1l (id1 x) -> unit1r (id1 x)

coh id2
    (x : *)
    (y : *) (f : x -> y)
    :
    (f -> f)
let id2 f = id2 _ _ f

coh comp2
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (h : x -> y) (b : g -> h)
    :
    f -> h
let comp2 a b = comp2 _ _ _ _ a _ b

coh comp12
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (g' : y -> z) (a : g -> g')
    :
    comp1 f g -> comp1 f g'
let comp12 f a = comp12 _ _ f _ _ _ a

coh comp21
    (x : *)
    (y : *) (f : x -> y)
    (f' : x -> y) (a : f -> f')
    (z : *) (g : y -> z)
    :
    comp1 f g -> comp1 f' g
let comp21 a g = comp21 _ _ _ _ a _ g

coh unit12l
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    comp2 (unit1l' f) (comp2 (comp12 (id1 x) a) (unit1l g)) -> a
let unit12l a = unit12l _ _ _ _ a

coh unit12l'
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    a -> comp2 (unit1l' f) (comp2 (comp12 (id1 x) a) (unit1l g))
let unit12l' a = unit12l' _ _ _ _ a

coh unit21r
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    comp2 (unit1r' f) (comp2 (comp21 a (id1 y)) (unit1r g)) -> a
let unit21 r a = unit21r _ _ _ _ a

coh unit21r'
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    a -> comp2 (unit1r' f) (comp2 (comp21 a (id1 y)) (unit1r g))
let unit21r' a = unit21r' _ _ _ _ a

coh ich2
    (x : *)
    (y : *) (f : x -> y)
    (f' : x -> y) (a : f -> f')
    (z : *) (g : y -> z)
    (g' : y -> z) (b : g -> g')
    :
    comp2 (comp21 a g) (comp12 f' b) -> comp2 (comp12 f b) (comp21 a g')
let ich2 a b = ich2 _ _ _ _ a _ _ _ b

# MacLane's coherence theorem
coh maclane
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (v : *) (h : z -> v)
    (w : *) (i : v -> w)
    :
    comp2 (assoc1 (comp1 f g) h i) (assoc1 f g (comp1 h i))
    ->
    comp2 (comp21 (assoc1 f g h) i) (comp2 (assoc1 f (comp1 g h) i) (comp12 f (assoc1 g h i)))

coh comp3
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (b : f -> g) (F : a -> b)
    (c : f -> g) (G : b -> c)
    :
    a -> c
let comp3 F G = comp3 _ _ _ _ _ _ F _ G

coh comp32
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (b : f -> g) (F : a -> b)
    (h : x -> y) (c : g -> h)
    :
    comp2 a c -> comp2 b c
let comp32 F a = comp32 _ _ _ _ _ _ F _ a

coh comp23
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (h : x -> y) (b : g -> h)
    (c : g -> h) (F : b -> c)
    :
    comp2 a b -> comp2 a c
let comp23 a F = comp23 _ _ _ _ a _ _ _ F

let comp3_1 F G = comp3 (comp32 F _) (comp23 _ G)

let eh1 (x : * )(a : id1 x -> id1 x) (b : id1 x -> id1 x) =
    comp3_1 (unit21r' a) (unit12l' b)

# let eh2 (a : id1 -> id1) (b : id1 -> id1) =
    # comp23 () (ich2 a b)

# let eh (a : id1 -> id1) (b : id1 -> id1) =
    # comp3 (eh1 a b) (eh2 a b)

# let eckmann-hilton (a : id1 -> id1) (b : id1 -> id1) =
    # comp2 (comp21 a id1) (comp12 id1 b)




# hyp x : *
# hyp y : *
# hyp z : *
# hyp f : x -> y
# hyp g : y -> z
# eval (comp f g)


# set groupoid = true

# coh inv (x : *) (y : *) (f : x -> y) : y -> x
