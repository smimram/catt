let comp = coh
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    =>
    (x -> z)
let comp (f : _ -> _) (g : _ -> _) = comp _ _ f _ g

# let assoc = coh
    # (x : *)
    # (y : *) (f : x -> y)
    # (z : *) (g : y -> z)
    # (w : *) (h : z -> w)
    # =>
    # comp x z (comp x y f z g) w h -> comp x y f w (comp y z g w h)

let assoc = coh
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (w : *) (h : z -> w)
    =>
    comp (comp f g) h -> comp f (comp g h)
let assoc (f : _ -> _) (g : _-> _) (h : _ -> _) = assoc _ _ f _ g _ h

let id = coh (x : *) => (x -> x)
let id = id _

let unitl = coh
    (x : *)
    (y : *) (f : x -> y)
    =>
    comp id f -> f
let unitl (f : _ -> _) = unitl _ _ f

let unitr = coh
    (x : *)
    (y : *) (f : x -> y)
    =>
    comp f id -> f
let unitr (f : _ -> _) = unitr _ _ f

let id1 = id
let comp1 = comp

let id2 = coh
    (x : *)
    (y : *) (f : x -> y)
    =>
    (f -> f)
let id2 (f : _ -> _) = id2 _ _ f

let vcomp = coh
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (h : x -> y) (b : g -> h)
    =>
    f -> h
let vcomp (a : _ -> _) (b : _ -> _) = vcomp _ _ _ _ a _ b

let hcomp = coh
    (x : *)
    (y : *) (f : x -> y)
    (f' : x -> y) (a : f -> f')
    (z : *) (g : y -> z)
    (g' : y -> z) (b : g -> g')
    =>
    comp f g -> comp f' g'
let hcomp (a : _ -> _) (b : _ -> _) = hcomp _ _ _ _ a _ _ _ b

let ichg = coh
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (h : x -> y) (b : g -> h)
    (z : *) (l : y -> z)
    (m : y -> z) (c : l -> m)
    (n : y -> z) (d : m -> n)
    =>
    hcomp (vcomp a b) (vcomp c d) -> vcomp (hcomp a c) (hcomp b d)

hyp x : *
hyp y : *
hyp z : *
hyp f : x -> y
hyp g : y -> z
eval (comp f g)


set groupoid = true

let inv = coh (x : *) (y : *) (f : x -> y) => y -> x
