let comp (X : Hom) = coh "comp"
    (x : X)
    (y : X) (f : x -> y)
    (z : X) (g : y -> z)
    :
    (x -> z)
let comp f g = comp _ _ _ f _ g

let assoc (X : Hom) = coh "assoc"
    (x : X)
    (y : X) (f : x -> y)
    (z : X) (g : y -> z)
    (w : X) (h : z -> w)
    :
    (comp (comp f g) h -> comp f (comp g h))
let assoc f g h = assoc _ _ _ f _ g _ h

let id (X : Hom) = coh "id" (x : X) : (x -> x)
let id (x : _) = id _ x

let unitl (X : Hom) = coh "unitl" (x : X) (y : X) (f : x -> y) : (comp (id x) f -> f)
let unitl f = unitl _ _ _ f

let unitl' (X : Hom) = coh "unitl'" (x : X) (y : X) (f : x -> y) : (f -> comp (id x) f)
let unitl' f = unitl' _ _ _ f

let unitr (X : Hom) = coh "unitr" (x : *) (y : *) (f : x -> y) : (comp f (id y) -> f)
let unitr f = unitr _ _ _ f
let unitr' (X : Hom) = coh "unitr'" (x : *) (y : *) (f : x -> y) : (f -> comp f (id y))
let unitr' f = unitr' _ _ _ f

coh comp12
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (g' : y -> z) (a : g -> g')
    :
    comp f g -> comp f g'
let comp12 f a = comp12 _ _ f _ _ _ a

coh comp21
    (x : *)
    (y : *) (f : x -> y)
    (f' : x -> y) (a : f -> f')
    (z : *) (g : y -> z)
    :
    comp f g -> comp f' g
let comp21 a g = comp21 _ _ _ _ a _ g

coh unit12l
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    comp (unitl' f) (comp (comp12 (id x) a) (unitl g)) -> a
# let unit12l a = unit12l _ _ _ _ a

# coh unit12l'
    # (x : *)
    # (y : *) (f : x -> y)
    # (g : x -> y) (a : f -> g)
    # :
    # a -> comp (unit1l' f) (comp (comp12 (id x) a) (unit1l g))
# let unit12l' a = unit12l' _ _ _ _ a

coh unit21r
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    comp (unitr' f) (comp (comp21 a (id y)) (unitr g)) -> a
let unit21 r a = unit21r _ _ _ _ a

coh unit21r'
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    :
    a -> comp (unitr' f) (comp (comp21 a (id y)) (unitr g))
let unit21r' a = unit21r' _ _ _ _ a

coh ich2
    (x : *)
    (y : *) (f : x -> y)
    (f' : x -> y) (a : f -> f')
    (z : *) (g : y -> z)
    (g' : y -> z) (b : g -> g')
    :
    comp (comp21 a g) (comp12 f' b) -> comp (comp12 f b) (comp21 a g')
let ich2 a b = ich2 _ _ _ _ a _ _ _ b

# MacLane's coherence theorem
coh maclane
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (v : *) (h : z -> v)
    (w : *) (i : v -> w)
    :
    comp (assoc (comp f g) h i) (assoc f g (comp h i))
    ->
    comp (comp21 (assoc f g h) i) (comp (assoc f (comp g h) i) (comp12 f (assoc g h i)))

coh comp3
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (b : f -> g) (F : a -> b)
    (c : f -> g) (G : b -> c)
    :
    a -> c
let comp3 F G = comp3 _ _ _ _ _ _ F _ G

coh comp32
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (b : f -> g) (F : a -> b)
    (h : x -> y) (c : g -> h)
    :
    comp a c -> comp b c
let comp32 F a = comp32 _ _ _ _ _ _ F _ a

coh comp23
    (x : *)
    (y : *) (f : x -> y)
    (g : x -> y) (a : f -> g)
    (h : x -> y) (b : g -> h)
    (c : g -> h) (F : b -> c)
    :
    comp a b -> comp a c
let comp23 a F = comp23 _ _ _ _ a _ _ _ F

let comp3_1 F G = comp3 (comp32 F _) (comp23 _ G)

let eh1 (x : * )(a : id x -> id x) (b : id x -> id x) =
    comp3_1 (unit21r' a) (unit12l' b)

# let eh2 (a : id -> id) (b : id -> id) =
    # comp23 () (ich2 a b)

# let eh (a : id -> id) (b : id -> id) =
    # comp3 (eh1 a b) (eh2 a b)

# let eckmann-hilton (a : id -> id) (b : id -> id) =
    # comp2 (comp21 a id) (comp12 id b)




# hyp x : *
# hyp y : *
# hyp z : *
# hyp f : x -> y
# hyp g : y -> z
# eval (comp f g)


# set groupoid = true

# coh inv (x : *) (y : *) (f : x -> y) : y -> x
